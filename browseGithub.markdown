# テスト対象になるアプリケーション

今回話を進めて行く中で、テスト対象になるアプリケーションは筆者が作成したBrowseGithubです。
BrowseGithubはiPhone用のgithubクライアントです。

今回BrowseGithubをテスト対象に選んだ主な理由は

* 多くの外部ライブラリを利用している
* クライアントアプリケーションであり、外部との通信を行う
* コードのシンタックスハイライトなどの複雑なロジック
* CoreDataなどのiOSネイティブ機能の利用
* 様々なビュー描画
* 目的がただ１つであるため、完結しているアプリケーション

このような理由です、一づつ詳しくみていきましょう。

## 多くの外部ライブラリを利用している
iOS開発のほんとうに初期の頃は、その多くがAppleがデフォルトで提供するUIパーツを使ったアプリケーションもよく見ました。
しかし最近では、デフォルトのUIパーツをさらに発展させ、見た目にも機能的にも洗礼されたアプリケーションが増えてきています。
そして多くの開発者はそれらのライブラリを利用しているでしょう。特にPullToRefreshなどはその代表格とも言えます。
通信ライブラリにはASIHTTPRequestやAFNetworkingなどを利用している方も多いのではないでしょうか。
テストの基本として、基本パーツのみでのテストを解説する、というのもよいのですが、より実践的な物の方がよいのではないでしょうか。
ただ、iOS界隈は流れが本当にはやく、このドキュメントをあなたが目にしたときには、既に次のトレンドが来ているかもしれません。
ライブラリを使いつつもより汎用性を持たせられるような、ライブラリに依存しないようなテストになるように心がけていますが、
このドキュメントは古く、役に立たなくなっているかもしれません。

## クライアントアプリケーションであり、外部との通信を行う
何かのサービスのクライアントアプリケーション、というのは数あるiOSアプリケーションの中でも特に多い部類にはいるものです。
そしてその多くがAPIとの通信を行い、日々データをやり取りしています。
通信はクライアントアプリケーションに取って核とも言える部分であり、非常にテストの手間が掛かると同時にテストのしがいがある場所でもあります。

## コードのシンタックスハイライトなどの複雑なロジック
単純なクライアントですが、その中にもクライアント側の実装を多く含んでいます。
コードのシンタックスハイライトやmarkdownのネイティブコンバートなどがBrowseGithubで特に複雑になるロジックです。
しかし、この手のロジックはコツさえ掴んでしまえばコード量は多いですが、テストを書く事はそれほど難しくなく、素直です。
ほとんど具体性のないサンプルアプリケーションのテストを延々と眺めるより、ずっとあなたの役に立つはずです。

## iOSネイティブ機能の利用
せっかくネイティブアプリを作るのですから、ネイティブの機能は使って行きたいものです。
BrowseGithubもCoreDataや、NSNotificationを活用したイベントのやりとりなど、フレームワークの中でも非常に多く使われているものを利用しています。
これらのテストは一度コツを掴んでしまえばほとんど変わる事がない上に、高精度なアプリケーションを構築することに大きく貢献します。
外部ライブラリを含むより実践的なことも大事ですが、それ以上に重要な部分とも言えます。


## 様々なビューの描画
iOSアプリケーションのビューはどんどん華やかに、そして複雑になってきています。
そしてビューは非常にテストが難しい場所であり、費用対効果が悪く、仕様変更などの影響を受け易い場所なので、テストとしての価値が低めに思われる場所です。
これについては筆者もそう思いますし、より洗礼されるためにテストがこけるのであれば、そうあるべきだと思っています。
そこで、今回はガチガチのビューのテストを扱うのではなく、主に開発をサポートするためのテストとして、ビューのテストを解説します。

## 目的がだた１つ
BrowseGithubは、GithubをiPhoneから快適にみることのみに焦点を置いて作られています。
目的が少ないことはよいことで、より洗礼されたコードを生み出す事にも貢献します。


