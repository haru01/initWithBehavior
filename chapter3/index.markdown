# 第三章:基本的な開発の流れ

この章ではユーザーが受け取ったイベントをリストで表示するための機能を作成します。
まずはタイムラインの表示に最小限必要な要素を整理しましょう。

* イベント一つ分を表すモデル
* APIからイベントを取得するためのモデル
* APIから受け取ったデータをコントローラーから扱い易くするためのモデル
* コントローラー
* イベントを表示するためのセル

さらにアプリケーションとして良い物にするためには以下のような要素が必要になりそうです。

* 引っ張って更新を行う為の仕組み
* イベントをタップすることで関連のある項目へ移動する仕組み
* Gravatarからユーザーのアバターを取得するモデル
* Gravatarから取得したアバターを表示するためのビュー

この章では最初に上げた5つのみを実装していきます。最初から仕様が大きくなりすぎると、手に負えなくなってしまいます。
目指すもののイメージとしては、以下のようなものになります。

実装していく順番については人によってそれぞれだと思うのですが、ここでは説明のし易さを優先した順番で、

+ pending...

という順序で実装を進めます。

またこの機能を実装するためには、OAuthを完了させ、ログインしているユーザー情報を取得している必要があります。
しかしそれらに触れるにはまだ早い段階であり、またこの機能のテストとは分離させるべきだと考えるため、モックを作って代用します。

では、コードを書き始めていきましょう！

## イベントを表すモデルを実装する

名前は`BGEvent`とすることにしましょう。いつものように`NSObject`を継承して新しいクラスを追加してください。
追加できましたか？けれど、焦らないで！絶対にコードを書いてはいけません！まだ仕様も決まっていないのですから！
すぐにテストのターゲットへ、`BGEventSpec`を追加してください。まだ、コードを書いてはいけません！

quote: 突き詰めれば`BGEvent`を作る以前に`BGEventSpec`で`BGEvent`というものが必要ということを記述するべきですが、
       Objective-Cの命名規則の特性上、タイポなどが起こりやすくなってしまうだけなので、クラス名など分かりきっていることに関してはあまりおすすめしません。

`BGEventSpec`を追加したら、仕様を決めていきましょう。
